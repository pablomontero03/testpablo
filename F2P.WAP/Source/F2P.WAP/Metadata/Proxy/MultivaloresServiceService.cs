//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// Este código fuente fue generado automáticamente por wsdl, Versión=4.6.1055.0.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="MultivaloresServiceSoapBinding", Namespace="http://service.wsmultivalores.equifax.com.sv")]
public partial class MultivaloresServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback changePasswordOperationCompleted;
    
    private System.Threading.SendOrPostCallback getCandidateInfoOperationCompleted;
    
    /// <remarks/>
    public MultivaloresServiceService() {
        this.Url = "https://www.equifax.com.sv/wsMultivaloresSV/services/MultivaloresService";
    }
    
    /// <remarks/>
    public event changePasswordCompletedEventHandler changePasswordCompleted;
    
    /// <remarks/>
    public event getCandidateInfoCompletedEventHandler getCandidateInfoCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.wsmultivalores.equifax.com.sv", ResponseNamespace="http://service.wsmultivalores.equifax.com.sv", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("changePasswordReturn")]
    public string changePassword(string usuario, string claveActual, string claveNueva, string claveNuevaConfirmacion) {
        object[] results = this.Invoke("changePassword", new object[] {
                    usuario,
                    claveActual,
                    claveNueva,
                    claveNuevaConfirmacion});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginchangePassword(string usuario, string claveActual, string claveNueva, string claveNuevaConfirmacion, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("changePassword", new object[] {
                    usuario,
                    claveActual,
                    claveNueva,
                    claveNuevaConfirmacion}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndchangePassword(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void changePasswordAsync(string usuario, string claveActual, string claveNueva, string claveNuevaConfirmacion) {
        this.changePasswordAsync(usuario, claveActual, claveNueva, claveNuevaConfirmacion, null);
    }
    
    /// <remarks/>
    public void changePasswordAsync(string usuario, string claveActual, string claveNueva, string claveNuevaConfirmacion, object userState) {
        if ((this.changePasswordOperationCompleted == null)) {
            this.changePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangePasswordOperationCompleted);
        }
        this.InvokeAsync("changePassword", new object[] {
                    usuario,
                    claveActual,
                    claveNueva,
                    claveNuevaConfirmacion}, this.changePasswordOperationCompleted, userState);
    }
    
    private void OnchangePasswordOperationCompleted(object arg) {
        if ((this.changePasswordCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.changePasswordCompleted(this, new changePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.wsmultivalores.equifax.com.sv", ResponseNamespace="http://service.wsmultivalores.equifax.com.sv", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("getCandidateInfoReturn")]
    public string getCandidateInfo(string usuario, string clave, string dui, string nit, string fechaNacimiento, string primerNombre, string segundoNombre, string primerApellido, string segundoApellido, string apellidoCasada) {
        object[] results = this.Invoke("getCandidateInfo", new object[] {
                    usuario,
                    clave,
                    dui,
                    nit,
                    fechaNacimiento,
                    primerNombre,
                    segundoNombre,
                    primerApellido,
                    segundoApellido,
                    apellidoCasada});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetCandidateInfo(string usuario, string clave, string dui, string nit, string fechaNacimiento, string primerNombre, string segundoNombre, string primerApellido, string segundoApellido, string apellidoCasada, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getCandidateInfo", new object[] {
                    usuario,
                    clave,
                    dui,
                    nit,
                    fechaNacimiento,
                    primerNombre,
                    segundoNombre,
                    primerApellido,
                    segundoApellido,
                    apellidoCasada}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndgetCandidateInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void getCandidateInfoAsync(string usuario, string clave, string dui, string nit, string fechaNacimiento, string primerNombre, string segundoNombre, string primerApellido, string segundoApellido, string apellidoCasada) {
        this.getCandidateInfoAsync(usuario, clave, dui, nit, fechaNacimiento, primerNombre, segundoNombre, primerApellido, segundoApellido, apellidoCasada, null);
    }
    
    /// <remarks/>
    public void getCandidateInfoAsync(string usuario, string clave, string dui, string nit, string fechaNacimiento, string primerNombre, string segundoNombre, string primerApellido, string segundoApellido, string apellidoCasada, object userState) {
        if ((this.getCandidateInfoOperationCompleted == null)) {
            this.getCandidateInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCandidateInfoOperationCompleted);
        }
        this.InvokeAsync("getCandidateInfo", new object[] {
                    usuario,
                    clave,
                    dui,
                    nit,
                    fechaNacimiento,
                    primerNombre,
                    segundoNombre,
                    primerApellido,
                    segundoApellido,
                    apellidoCasada}, this.getCandidateInfoOperationCompleted, userState);
    }
    
    private void OngetCandidateInfoOperationCompleted(object arg) {
        if ((this.getCandidateInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getCandidateInfoCompleted(this, new getCandidateInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
public delegate void changePasswordCompletedEventHandler(object sender, changePasswordCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class changePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal changePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
public delegate void getCandidateInfoCompletedEventHandler(object sender, getCandidateInfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getCandidateInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getCandidateInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}
